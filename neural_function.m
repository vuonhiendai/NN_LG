function Y = neural_function(X,~,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Sep-2021 09:09:56.
% 
% [Y] = neural_function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [5.7730061322203445329;-7.0542523082356254349;3.5411434854993664167;-6.4330763729093893843;4.5758273398148476829];
IW1_1 = [-2.5357623292903475054 -3.4073527126251490493 -3.2149811296089336743 3.2989551885051491276;4.4037483052231607417 3.2121353251517157368 -2.0235007216853850842 2.7959959266448399795;-1.4888903227451697475 -0.015005607233850516008 8.3458064850247630773 56.780019511865980064;3.3336077156391326071 3.467498268705918818 1.0700631652265770732 -0.75762327281338359697;-1.5006114929008884662 -1.2930188776141606777 6.5790412799690907164 -6.8210214352426241646];

% Layer 2
b2 = 15.754584307958447553;
LW2_1 = [25.907105387588828194 -24.219300905785640765 16.9505376563793142 46.07768736855908287 -36.706971680527232138];

% ===== SIMULATION ========

% Format Input Arguments
% isCellX = iscell(X);
% if ~isCellX
%   X = {X};
% end
% 
% % Dimensions
% TS = size(X,2); % timesteps
% if ~isempty(X)
%   Q = size(X{1},2); % samples/series
% else
%   Q = 0;
% end

% Allocate Outputs
% Y = cell(1,TS);

% Time loop
% for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
%     a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    a1 = tansig_apply(b1+ IW1_1*X);
    % Layer 2
%     a2 = poslin_apply(repmat(b2,1,Q) + LW2_1*a1);
    a2 = poslin_apply(b2 + LW2_1*a1);
    % Output 1
    Y = a2;
% end

% Final Delay States
% Xf = cell(1,0);
% Af = cell(2,0);

% Format Output Arguments
% if ~isCellX
%   Y = cell2mat(Y);
% end
end

% ===== MODULE FUNCTIONS ========

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  a = max(0,n);
  a(isnan(n)) = nan;
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
